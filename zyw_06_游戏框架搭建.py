# 目标：使用　面向对象　设计飞机大战游戏类
"""
１．明确主程序职责
２．实现主程序类
３．准备游戏精灵组
"""

# 明确主程序职责
"""
回顾　快速入门案例，一个游戏的主程序的职责可以分为两个部分
    游戏初始化
    游戏循环
游戏初始化 （飞机大战游戏中所需要的属性）             
    １．设置游戏窗口
    ２．创建游戏时钟
    ３．创建精灵，精灵组
游戏循环：
    １．设置刷新帧率
    ２．事件监听
    ３．碰撞检测
    ４．更新/绘制精灵组
    ５．更新屏幕显示
    
   
根据明确的职责，设置PlaneGame类如下

属性：
screen
clock
精灵组或精灵....

方法：
__init__(self):
__create_sprites(self):
start_game(self):
__event_handler(self):
__check_collide(self):
__update_sprites(self):
__game_over():


提示：根据　职责　封装　私有方法，
     可以避免某一个方法的代码写的过于冗长
     如果一个代码编写的太长，既不好阅读，也不好维护

"""

# 实现飞机大战主游戏类 --plan_main / --plane_sprites
"""
明确文件职责
plane_main    -游戏主程序
plane_sprites -屏幕尺寸常量，游戏精灵子类

plane_main
    １．封装主游戏类
    ２．创建游戏对象
    ３．启动游戏
    
plane_sprites
    1.封装游戏中所有需要使用的精灵子类
    ２．提供游戏的相关工具
代码实现：
新建plane_main.py文件，并且设置为可执行
编写基础代码
"""

# self.sereen = pygame.display.set_mode((480,700))
# 这里的(400,700)不要写死
pass
# 解决方法：使用常量代替固定的值
"""
常量：不变化的量　||　变量：可以变化的量
应用场景：
    在开发时，可能会需要使用　固定的数值，例如　屏幕的高度是700
    这个时候，建议不要直接使用固定的数值，而应该使用常量
    在开发时，为了保证代码的可维护性，尽量不要使用　　魔法数字（自行百度）
常量的定义：
    定义常量和定义变量的 语法一模一样，都是使用赋值语句
    常量的命名　应该　所有字母都使用大写，单词与单词之间可以使用下划线连接
常量的好处
    阅读代码时，通过常量名　见名知意，不需要猜测数字的含义
    如果需要调整值，只需要　修改常量定义　就可以实现统一修改
提示：
    Python中并没有真正意义上的常量，只是通过命名的约定　
    --所有字母都大写的就是常量，开发时不要轻易的修改
    
"""



